@using SplitWiseService.Constants
@{
    ViewData["Title"] = "Friends";
}

<breadcrumb></breadcrumb>
<h3 class="bg-white mb-3 p-3 text-dark-emphasis shadow">Friends</h3>
<div class="d-flex flex-wrap justify-content-between gap-3 mb-3">
    <div class="d-flex align-items-center gap-4">
        <input type="text" class="searchBox form-control border-secondary-subtle rounded-0" id="friendSearch"
            placeholder="Search">
        <div class="form-check">
            <input class="form-check-input border border-secondary-subtle" type="checkbox" value=""
                id="deletedFriendsChk" onchange="getFriendList(1)">
            <label class="form-check-label text-nowrap" for="deletedFriendsChk">
                Show removed friends
            </label>
        </div>
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-secondary" type="button" onclick="exportFriends()">Export</button>
        <button class="btn btn-primary" type="button" onclick="fetchAddFriendModal()">Add Friend</button>
    </div>
</div>
<div id="friendListOuter" class="listOuter bg-white"></div>


@* Send friend request *@
<script>
    // Send friend request
    function sendRequest(email) {
        $.ajax({
            url: "/Friend/SendFriendRequestAjax",
            type: "POST",
            data: { email },
            success: function (response) {
                if (!response.statusCode) {
                    if (response.success == false) {
                        toastr.error(response.message);
                    }
                    else {
                        toastr.success(response.message);
                        getFriendList(1);
                    }
                }
            },
            error: function () {
                toastr.error('@NotificationMessages.InternalServerError');
            }
        });
    }
</script>

@* Friend list *@
<script>
    sortColumn = "";
    sortOrder = "";
    searchTimeout;

    $("#friendSearch").on("input", function () {
        if (searchTimeout === null) {
            searchTimeout = setTimeout(function () {
                getFriendList(1);
            }, 500);
        }
    });

    $(document).ready(function () {
        getFriendList(1);
    });

    function getFriendList(currentPage) {
        clearTimeout(searchTimeout);
        searchTimeout = null;

        let filter = {
            PageNumber: currentPage,
            PageSize: $("#friendPageSize").val(),
            SearchString: $("#friendSearch").val(),
            SortColumn: sortColumn,
            SortOrder: sortOrder,
            IsDeleted: $("#deletedFriendsChk").prop("checked")
        };

        $.ajax({
            url: "/Friend/FriendList",
            type: "POST",
            data: { filter },
            success: function (response) {
                if (!response.statusCode) {
                    if (response.success == false) {
                        toastr.error(response.message);
                    }
                    else {
                        $("#friendListOuter").html(response);
                    }
                }
            },
            error: function () {
                toastr.error('@NotificationMessages.InternalServerError');
            }
        });
    }

    // Handle sorting
    $(document).on("click", ".sortBtn", function () {
        sortColumn = $(this).data("column");
        sortOrder = $(this).data("order");
        getFriendList(1);
    });

    // Export friends
    function exportFriends() {
        let filter = {
            SearchString: $("#friendSearch").val(),
            IsDeleted: $("#deletedFriendsChk").prop("checked")
        };

        $.ajax({
            url: '/Friend/ExportFriends',
            type: "POST",
            data: { filter },
            xhrFields: {
                responseType: 'blob'
            },
            success: function (data, status, xhr) {
                if (data.success === false) {
                    console.log(data)
                    toastr.error(data.message);
                } else {
                    let filename = `Friends_${new Date().getTime()}.xlsx`;

                    let disposition = xhr.getResponseHeader('Content-Disposition');
                    if (disposition && disposition.indexOf('attachment') !== -1) {
                        let matches = /filename="([^"]+)"/.exec(disposition);
                        if (matches !== null && matches[1]) filename = matches[1];
                    }

                    let blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });
                    let link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    toastr.success("Data has been exported successfully.");
                }
            },
            error: function () {
                toastr.error("Export Failed");
            }
        });
    }
</script>

@* Remove friend *@
<script>
    function removeFriend(friendId) {
        $.ajax({
            url: "/Friend/RemoveFriend",
            type: "POST",
            data: { friendId },
            success: function (response) {
                if (!response.statusCode) {
                    if (response.success == true) {
                        toastr.success(response.message);
                        getFriendList(1);
                    }
                    else {
                        toastr.error(response.message);
                    }
                }
            },
            error: function () {
                toastr.error('@NotificationMessages.InternalServerError');
            }
        });
    }
</script>
